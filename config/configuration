# .env
NODE_ENV=development
PORT=3000
DB_HOST=localhost
DB_USER=myuser
DB_PASS=mypassword
DB_NAME=mydatabase
JWT_SECRET=mysecretkey



// config/config.js
import dotenv from 'dotenv';
import path from 'path';

// Load environment variables from .env file
dotenv.config({ path: path.resolve(process.cwd(), '.env') });

// Define configurations for different environments
const config = {
  development: {
    env: 'development',
    port: process.env.PORT || 3000,
    db: {
      host: process.env.DB_HOST,
      user: process.env.DB_USER,
      pass: process.env.DB_PASS,
      name: process.env.DB_NAME,
    },
    jwtSecret: process.env.JWT_SECRET,
  },
  production: {
    env: 'production',
    port: process.env.PORT || 8000,
    db: {
      host: process.env.DB_HOST,
      user: process.env.DB_USER,
      pass: process.env.DB_PASS,
      name: process.env.DB_NAME,
    },
    jwtSecret: process.env.JWT_SECRET,
  },
  test: {
    env: 'test',
    port: process.env.PORT || 4000,
    db: {
      host: process.env.DB_HOST,
      user: process.env.DB_USER,
      pass: process.env.DB_PASS,
      name: process.env.DB_NAME,
    },
    jwtSecret: process.env.JWT_SECRET,
  },
};

// Export the configuration for the current environment
const currentConfig = config[process.env.NODE_ENV] || config.development;

export default currentConfig;



// app.js
import express from 'express';
import config from './config/config.js';

const app = express();

// Example middleware to log the current environment and port
app.use((req, res, next) => {
  console.log(`Environment: ${config.env}`);
  console.log(`Port: ${config.port}`);
  next();
});

// Start the server
app.listen(config.port, () => {
  console.log(`Server running on port ${config.port}`);
});
